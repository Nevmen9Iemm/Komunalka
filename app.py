import logging
import datetime
import asyncio

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.client.bot import DefaultBotProperties

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base, relationship
from sqlalchemy import Column, Integer, String, Float, DateTime, ForeignKey, select

import config  # –§–∞–π–ª config.py –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –∑–º—ñ–Ω–Ω—É TG_TOKEN
from keyboards.inline import electricity_keyboards, start_keyboard, merge_keyboards, menu_keyboards
from keyboards.reply import persistent_reply_keyboard, main_reply_keyboard

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
DATABASE_URL = "sqlite+aiosqlite:///komunalka.db"
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = async_sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)
Base = declarative_base()

# –ú–æ–¥–µ–ª—ñ –ë–î
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, nullable=False)
    user_name = Column(String, nullable=False)
    addresses = relationship("Address", backref="user")
    bills = relationship("Bill", backref="user")

class Address(Base):
    __tablename__ = 'addresses'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    city = Column(String)
    street = Column(String)
    house = Column(String)
    entrance = Column(String, nullable=True)
    floor = Column(String, nullable=True)
    apartment = Column(String, nullable=True)
    bills = relationship("Bill", backref="address")

class Bill(Base):
    __tablename__ = 'bills'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id'))
    address_id = Column(Integer, ForeignKey('addresses.id'))
    service = Column(String)  # "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è", "–ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è", "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è"
    created_at = Column(DateTime, default=datetime.datetime.now)
    # –û–¥–Ω–æ–∑–æ–Ω–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è
    current = Column(Integer, nullable=True)
    previous = Column(Integer, nullable=True)
    consumption = Column(Integer, nullable=True)
    tariff = Column(Float, nullable=True)
    total_cost = Column(Float, nullable=True)
    # –î–≤–æ–∑–æ–Ω–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è (–ø–æ–ª—è —ñ–∑ —Å—É—Ñ—ñ–∫—Å–æ–º _2)
    current_day_2 = Column(Integer, nullable=True)
    current_night_2 = Column(Integer, nullable=True)
    previous_day_2 = Column(Integer, nullable=True)
    previous_night_2 = Column(Integer, nullable=True)
    consumption_day_2 = Column(Integer, nullable=True)
    consumption_night_2 = Column(Integer, nullable=True)
    total_consumption_2 = Column(Integer, nullable=True)
    tariff_day_2 = Column(Float, nullable=True)
    tariff_night_2 = Column(Float, nullable=True)
    cost_day_2 = Column(Float, nullable=True)
    cost_night_2 = Column(Float, nullable=True)
    total_cost_2 = Column(Float, nullable=True)
    # –¢—Ä—å–æ—Ö–∑–æ–Ω–Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è (–ø–æ–ª—è —ñ–∑ —Å—É—Ñ—ñ–∫—Å–æ–º _3)
    current_peak = Column(Integer, nullable=True)
    previous_peak = Column(Integer, nullable=True)
    consumption_peak = Column(Integer, nullable=True)
    current_day_3 = Column(Integer, nullable=True)
    previous_day_3 = Column(Integer, nullable=True)
    consumption_day_3 = Column(Integer, nullable=True)
    current_night_3 = Column(Integer, nullable=True)
    previous_night_3 = Column(Integer, nullable=True)
    consumption_night_3 = Column(Integer, nullable=True)
    total_consumption_3 = Column(Integer, nullable=True)
    tariff_peak = Column(Float, nullable=True)
    tariff_day_3 = Column(Float, nullable=True)
    tariff_night_3 = Column(Float, nullable=True)
    cost_peak = Column(Float, nullable=True)
    cost_day_3 = Column(Float, nullable=True)
    cost_night_3 = Column(Float, nullable=True)
    total_cost_3 = Column(Float, nullable=True)
    # –ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è
    gas_current = Column(Integer, nullable=True)
    gas_previous = Column(Integer, nullable=True)
    gas_consumption = Column(Integer, nullable=True)
    tariff_gas = Column(Float, nullable=True)
    tariff_gas_supply = Column(Float, nullable=True)
    cost_gas = Column(Float, nullable=True)
    cost_gas_supply = Column(Float, nullable=True)
    total_cost_gas = Column(Float, nullable=True)
    # –í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è
    unloads = Column(Integer, nullable=True)
    bins = Column(Integer, nullable=True)
    trash_tariff = Column(Float, nullable=True)
    total_cost_trash = Column(Float, nullable=True)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î
async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    logging.info("Database initialized.")

# –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ (—Å—Ç–∞—Ä—ñ—à–µ 2 —Ä–æ–∫—ñ–≤)
async def async_clear_old_bills():
    try:
        async with async_session() as session:
            two_years_ago = datetime.datetime.now() - datetime.timedelta(days=2*365)
            stmt = select(Bill).where(Bill.created_at < two_years_ago)
            result = await session.execute(stmt)
            old_bills = result.scalars().all()
            for bill in old_bills:
                await session.delete(bill)
            await session.commit()
            logging.info("–°—Ç–∞—Ä—ñ —Ä–∞—Ö—É–Ω–∫–∏ –æ—á–∏—â–µ–Ω–æ.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—á–∏—â–µ–Ω–Ω—ñ —Å—Ç–∞—Ä–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤: {e}")


# FSM ‚Äì –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
class Form(StatesGroup):
    start = State()
    telegram_id = State()
    city = State()
    street = State()
    house = State()
    entrance = State()
    floor = State()
    apartment = State()
    # –≤–∏–±—ñ—Ä —ñ—Å–Ω—É—é—á–æ—ó –∞–¥—Ä–µ—Å–∏ –∞–±–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó
    address_confirm = State()
    # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
    service = State()
    electricity_type = State()
    # –û–¥–Ω–æ–∑–æ–Ω–Ω–∏–π
    elec_one_current = State()
    elec_one_previous = State()
    # –î–≤–æ–∑–æ–Ω–Ω–∏–π
    elec_two_current_day = State()
    elec_two_current_night = State()
    elec_two_previous_day = State()
    elec_two_previous_night = State()
    # –¢—Ä—å–æ—Ö–∑–æ–Ω–Ω–∏–π
    elec_three_current_peak = State()
    elec_three_current_day = State()
    elec_three_current_night = State()
    elec_three_previous_peak = State()
    elec_three_previous_day = State()
    elec_three_previous_night = State()
    # –ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è
    gas_current = State()
    gas_previous = State()
    # –í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è
    trash_unloads = State()
    trash_bins = State()
    # –†–∞—Ö—É–Ω–∫–∏
    bill_address = State()
    # –í–∏–±—ñ—Ä –∞–¥—Ä–µ—Å–∏
    select_address = State()


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TG_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

from aiogram.types import ReplyKeyboardRemove
from keyboards.reply import persistent_reply_keyboard  # reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–†–æ–∑–ø–æ—á–∞—Ç–∏"


@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ reply –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —è–∫–∞ –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏–º–µ—Ç—å—Å—è
    await message.answer(text="–í—ñ—Ç–∞—é!!! üá∫üá¶" ,reply_markup=persistent_reply_keyboard())

    # –û—Ç—Ä–∏–º—É—î–º–æ telegram_id —ñ user_name –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    telegram_id = message.from_user.id
    user_name = (f"{message.from_user.first_name} {message.from_user.last_name}"
                 if message.from_user.last_name else message.from_user.first_name)

    try:
        async with async_session() as session:
            # –®—É–∫–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ telegram_id
            stmt = select(User).where(User.telegram_id == telegram_id)
            result = await session.execute(stmt)
            user = result.scalars().first()
            if not user:
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î ‚Äì —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ
                user = User(telegram_id=telegram_id, user_name=user_name)
                session.add(user)
                await session.commit()
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ —É FSM
            await state.update_data(user_id=user.id, telegram_id=telegram_id, user_name=user_name)

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–¥—Ä–µ—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            stmt_addr = select(Address).where(Address.user_id == user.id)
            result_addr = await session.execute(stmt_addr)
            addresses = result_addr.scalars().all()

        if addresses:
            # –§–æ—Ä–º—É—î–º–æ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏
            text = "–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –∞–¥—Ä–µ—Å–∏:\n"
            inline_kb = InlineKeyboardMarkup(inline_keyboard=[])
            for addr in addresses:
                addr_text = f"{addr.city}, {addr.street}, {addr.house}"
                if addr.apartment:
                    addr_text += f", –∫–≤. {addr.apartment}"
                # text += addr_text + "\n"
                inline_kb.inline_keyboard.append(
                    [InlineKeyboardButton(text=addr_text, callback_data=f"select_address_{addr.id}")]
                )
            # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó –∞–¥—Ä–µ—Å–∏
            inline_kb.inline_keyboard.append(
                [InlineKeyboardButton(text="–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∞–¥—Ä–µ—Å—É", callback_data="add_new_address")]
            )
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é
            await message.answer(text, reply_markup=inline_kb)
            await state.set_state(Form.address_confirm)
        else:
            # –Ø–∫—â–æ –∞–¥—Ä–µ—Å –Ω–µ–º–∞—î, –ø—Ä–æ—Å–∏–º–æ —ó—Ö –≤–≤–µ—Å—Ç–∏
            await message.answer("–ê–¥—Ä–µ—Å–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É.\n–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ:",
                                 reply_markup=ReplyKeyboardRemove())
            await state.set_state(Form.city)
    except Exception as e:
        logging.error(f"Error in cmd_start: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")



# -------------------- Message Handlers --------------------
# –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è –∞–¥—Ä–µ—Å–∏
@dp.message(F.text, StateFilter(Form.city))
async def process_city(message: types.Message, state: FSMContext):
    logging.debug("Entered process_city handler")
    try:
        await state.update_data(city=message.text.strip())
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤—É–ª–∏—Ü—é:")
        await state.set_state(Form.street)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_city: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.street))
async def process_street(message: types.Message, state: FSMContext):
    logging.debug("Entered process_street handler")
    try:
        await state.update_data(street=message.text.strip())
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É:")
        await state.set_state(Form.house)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_street: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.house))
async def process_house(message: types.Message, state: FSMContext):
    logging.debug("Entered process_house handler")
    try:
        await state.update_data(house=message.text.strip())
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—ñ–¥'—ó–∑–¥ (—è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –≤–≤–µ–¥—ñ—Ç—å '-' ):")
        await state.set_state(Form.entrance)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_house: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.entrance))
async def process_entrance(message: types.Message, state: FSMContext):
    logging.debug("Entered process_entrance handler")
    try:
        entrance = message.text.strip()
        if entrance == "-":
            entrance = None
        await state.update_data(entrance=entrance)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤–µ—Ä—Ö (—è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –≤–≤–µ–¥—ñ—Ç—å '-' ):")
        await state.set_state(Form.floor)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_entrance: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.floor))
async def process_floor(message: types.Message, state: FSMContext):
    logging.debug("Entered process_floor handler")
    try:
        floor = message.text.strip()
        if floor == "-":
            floor = None
        await state.update_data(floor=floor)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä–∏ (—è–∫—â–æ —î, —ñ–Ω–∞–∫—à–µ –≤–≤–µ–¥—ñ—Ç—å '-' ):")
        await state.set_state(Form.apartment)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_floor: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.apartment))
async def process_apartment(message: types.Message, state: FSMContext):
    logging.debug("Entered process_apartment handler")
    try:
        apartment = message.text.strip()
        if apartment == "-":
            apartment = None
        data = await state.get_data()
        async with async_session() as session:
            address = Address(
                user_id=data["user_id"],
                city=data["city"],
                street=data["street"],
                house=data["house"],
                entrance=data.get("entrance"),
                floor=data.get("floor"),
                apartment=apartment
            )
            session.add(address)
            await session.commit()
            await state.update_data(address_id=address.id)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
            [InlineKeyboardButton(text="–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è", callback_data="service_electricity")],
            [InlineKeyboardButton(text="–ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è", callback_data="service_gas")],
            [InlineKeyboardButton(text="–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è", callback_data="service_trash")],
            [InlineKeyboardButton(text="–†–∞—Ö—É–Ω–∫–∏", callback_data="service_bills]")]
            ]
        )
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –∫–æ–º—É–Ω–∞–ª—å–Ω—É –ø–æ—Å–ª—É–≥—É:", reply_markup=keyboard)
        await state.set_state(Form.service)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_apartment: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# @dp.message()
# async def default_handler(message: types.Message, state: FSMContext):
#     current_state = await state.get_state()
#     logging.debug(f"Default handler: message.text = {message.text}, current_state = {current_state}")

# -------------------- Callback Query Handlers --------------------
@dp.callback_query(F.data == "start_")
async def callback_start(callback: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback.id)  # –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ Telegram, —â–æ callback –æ–±—Ä–æ–±–ª–µ–Ω–æ
    # –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é cmd_start, –ø–µ—Ä–µ–¥–∞—é—á–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ callback —Ç–∞ user_id, –æ—Ç—Ä–∏–º–∞–Ω–∏–π —ñ–∑ callback.from_user.id
    await cmd_start(callback.message, state, user_id=callback.from_user.id)

# Callback –¥–ª—è –≤–∏–±–æ—Ä—É —ñ—Å–Ω—É—é—á–æ—ó –∞–¥—Ä–µ—Å–∏ —á–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó
@dp.callback_query(F.data.startswith("select_address_"))
async def process_select_address(callback: types.CallbackQuery, state: FSMContext):
    logging.debug("Entered process_select_address handler")
    try:
        current_state = await state.get_state()
        if current_state != Form.address_confirm.state:
            return
        # –û—Ç—Ä–∏–º—É—î–º–æ id –∞–¥—Ä–µ—Å–∏ —ñ–∑ callback data
        addr_id = int(callback.data.split("_")[-1])
        await state.update_data(address_id=addr_id)
        await bot.answer_callback_query(callback.id)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∞–¥—Ä–µ—Å–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        async with async_session() as session:
            stmt = select(Address).where(Address.id == addr_id)
            result = await session.execute(stmt)
            address = result.scalars().first()
            if address:
                full_address = f"{address.city}, {address.street}, {address.house}"
                if address.apartment:
                    full_address += f", –∫–≤. {address.apartment}"
            else:
                full_address = "–Ω–µ–≤—ñ–¥–æ–º–∞ –∞–¥—Ä–µ—Å–∞"

        data = await state.get_data()
        address_id = data.get("address_id")
        user_id = data.get("user_id")

        # –§–æ—Ä–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥
        specific_kb = merge_keyboards(menu_keyboards(address_id=address_id, user_id=user_id))

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ—Ç—Ä–∏–º–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=f"–û–±–µ—Ä—ñ—Ç—å –∫–æ–º—É–Ω–∞–ª—å–Ω—É –ø–æ—Å–ª—É–≥—É –¥–ª—è –∞–¥—Ä–µ—Å–∏ {full_address}:",
            reply_markup=specific_kb  # –æ–Ω–æ–≤–ª–µ–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
        )

        await state.set_state(Form.service)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_select_address: {e}")
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"/start\" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
            reply_markup=None
        )


@dp.callback_query(lambda c: c.data == "add_new_address")
async def process_add_new_address(callback: types.CallbackQuery, state: FSMContext):
    logging.debug("Entered process_add_new_address handler")
    try:
        await bot.answer_callback_query(callback.id)
        await bot.answer_callback_query(callback.id)
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞:",
            reply_markup=None
        )
        await state.set_state(Form.city)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_add_new_address: {e}")
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"/start\" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
            reply_markup=None
        )


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø–æ—Å–ª—É–≥–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("service_"))
async def process_service(callback: types.CallbackQuery, state: FSMContext):
    logging.debug("Entered process_service handler")
    try:
        service = callback.data.split("_")[1]
        await state.update_data(service=service)
        await bot.answer_callback_query(callback.id)
        if service == "electricity":
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"/start\" –¥–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏:",
                reply_markup=electricity_keyboards()
            )
            await state.set_state(Form.electricity_type)
        elif service == "gas":
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≥–∞–∑—É:",
                reply_markup=None
            )
            await state.set_state(Form.gas_current)
        elif service == "trash":
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω—å:",
                reply_markup=None
            )
            await state.set_state(Form.trash_unloads)
        elif service == "bills":
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="–í–∞—à—ñ —Ä–∞—Ö—É–Ω–∫–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"/start\" –¥–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏:",
                reply_markup=None
            )
            await state.set_state(Form.bill_address)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_service: {e}")
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"/start\" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
            reply_markup=None
        )


# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –¥–ª—è –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó
@dp.callback_query(lambda c: c.data in ["elec_one", "elec_two", "elec_three"])
async def process_electricity_type(callback: types.CallbackQuery, state: FSMContext):
    logging.debug("Entered process_electricity_type handler")
    try:
        elec_type = callback.data
        await state.update_data(electricity_type=elec_type)
        await bot.answer_callback_query(callback.id)
        if elec_type == "elec_one":
            logging.debug("Entered elec_one")
            await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ (–û–¥–Ω–æ–∑–æ–Ω–Ω–∏–π):")
            await state.set_state(Form.elec_one_current)
        elif elec_type == "elec_two":
            logging.debug("Entered elec_two")
            await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–î–µ–Ω—å':")
            await state.set_state(Form.elec_two_current_day)
        elif elec_type == "elec_three":
            logging.debug("Entered elec_three")
            await bot.send_message(callback.from_user.id, "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–ü—ñ–∫':")
            await state.set_state(Form.elec_three_current_peak)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_electricity_type: {e}")
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"/start\" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
            reply_markup=None
        )


# ----------------- –ü–µ—Ä–µ–≥–ª—è–¥ —Ä–∞—Ö—É–Ω–∫—ñ–≤ -----------------
@dp.callback_query(F.data.startswith("bill_address_"))
async def process_bill_address(callback: types.CallbackQuery, state: FSMContext):
    try:
        logging.debug("Entered process_bill_address handler")
        data = await state.get_data()
        logging.debug(f"FSM data: {data}")

        # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ address_id –ø—Ä–∏—Å—É—Ç–Ω—ñ–π
        if "address_id" not in data:
            raise ValueError("address_id –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É FSM")

        # –°–æ—Ä—Ç—É—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏ –∑–∞ –¥–∞—Ç–æ—é (–æ—Å—Ç–∞–Ω–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ –±—É–¥—É—Ç—å –Ω–∞ –ø–æ—á–∞—Ç–∫—É)
        stmt = select(Bill).where(Bill.address_id == data["address_id"]).order_by(Bill.created_at.desc())
        async with async_session() as session:
            result = await session.execute(stmt)
            bills = result.scalars().all()

            # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É —ñ–∑ –ø—É—Å—Ç–∏–º —Å–ø–∏—Å–∫–æ–º —Ä—è–¥–∫—ñ–≤
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            # –ù—É–º–µ—Ä—É—î–º–æ —Ä–∞—Ö—É–Ω–∫–∏, –ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 1
            for bill in bills:
                created_at_str = bill.created_at.strftime("%d-%m-%Y") if bill.created_at else "N/A"

                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ—Å–ª—É–≥–∏
                if bill.service == "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è":
                    total_cost = bill.total_cost or bill.total_cost_2 or bill.total_cost_3
                elif bill.service == "–ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è":
                    total_cost = bill.total_cost_gas
                elif bill.service == "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è":
                    total_cost = bill.total_cost_trash
                else:
                    total_cost = 0

                # –û–∫—Ä—É–≥–ª—é—î–º–æ –≤–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ 2-—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
                total_cost_str = f"{total_cost:.2f}"
                bill_text = f"{bill.id}. {created_at_str}, {bill.service}, {total_cost_str} –≥—Ä–Ω"
                keyboard.inline_keyboard.append(
                    [InlineKeyboardButton(text=bill_text, callback_data=f"bill_detail_{bill.id}")]
                )

            if bills:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text="–í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏ –∫–æ–º—É–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Å–ª—É–≥ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"/start\" –¥–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏:",
                    reply_markup=keyboard
                )

            else:
                await bot.edit_message_text(
                    chat_id=callback.message.chat.id,
                    message_id=callback.message.message_id,
                    text="–†–∞—Ö—É–Ω–∫–∏ –∑–∞ –≤–∏–±—Ä–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å \"/start\" –¥–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏:",
                    reply_markup=None
                )

        await state.clear()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_bill_address: {e}")
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"/start\" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
            reply_markup=None
        )


@dp.callback_query(F.data.startswith("bill_detail_"))
async def process_bill_detail(callback: types.CallbackQuery, state: FSMContext):
    try:
        logging.debug("Entered process_bill_detail handler")
        # –û—Ç—Ä–∏–º—É—î–º–æ id —Ä–∞—Ö—É–Ω–∫—É –∑ callback data
        bill_id = int(callback.data.split("_")[-1])

        async with async_session() as session:
            stmt = select(Bill).where(Bill.id == bill_id)
            result = await session.execute(stmt)
            bill = result.scalars().first()

        if not bill:
            await bot.send_message(callback.from_user.id, "–†–∞—Ö—É–Ω–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –¥–∞—Ç—É
        created_at_str = bill.created_at.strftime("%Y-%m-%d %H:%M:%S") if bill.created_at else "N/A"
        details = f"–†–∞—Ö—É–Ω–æ–∫ ‚Ññ{bill_id}\n–î–∞—Ç–∞: {created_at_str}\n–ü–æ—Å–ª—É–≥–∞: {bill.service}\n\n"

        if bill.service == "–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è":
            if bill.total_cost is not None:
                details += "–¢–∏–ø: –û–¥–Ω–æ–∑–æ–Ω–Ω–∏–π\n"
                details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏: {int(bill.current)}\n"
                details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏: {int(bill.previous)}\n"
                details += f"–°–ø–æ–∂–∏—Ç–æ: {int(bill.consumption)}\n"
                details += f"–¢–∞—Ä–∏—Ñ: {bill.tariff}\n"
                details += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {bill.total_cost:.2f} –≥—Ä–Ω\n"
            elif bill.total_cost_2 is not None:
                details += "–¢–∏–ø: –î–≤–æ–∑–æ–Ω–Ω–∏–π\n"
                details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–î–µ–Ω—å): {int(bill.current_day_2)}\n"
                details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–î–µ–Ω—å): {int(bill.previous_day_2)}\n"
                details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ù—ñ—á): {int(bill.current_night_2)}\n"
                details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ù—ñ—á): {int(bill.previous_night_2)}\n"
                details += f"–°–ø–æ–∂–∏—Ç–æ (–î–µ–Ω—å): {int(bill.consumption_day_2)}\n"
                details += f"–°–ø–æ–∂–∏—Ç–æ (–ù—ñ—á): {int(bill.consumption_night_2)}\n"
                details += f"–¢–∞—Ä–∏—Ñ (–î–µ–Ω—å): {bill.tariff_day_2}\n"
                details += f"–¢–∞—Ä–∏—Ñ (–ù—ñ—á): {bill.tariff_night_2}\n"
                details += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {bill.total_cost_2:.2f} –≥—Ä–Ω\n"
            elif bill.total_cost_3 is not None:
                details += "–¢–∏–ø: –¢—Ä—å–æ—Ö–∑–æ–Ω–Ω–∏–π\n"
                details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ü—ñ–∫): {int(bill.current_peak)}\n"
                details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ü—ñ–∫): {int(bill.previous_peak)}\n"
                details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–î–µ–Ω—å): {int(bill.current_day_3)}\n"
                details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–î–µ–Ω—å): {int(bill.previous_day_3)}\n"
                details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ù—ñ—á): {int(bill.current_night_3)}\n"
                details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ (–ù—ñ—á): {int(bill.previous_night_3)}\n"
                details += f"–°–ø–æ–∂–∏—Ç–æ (–ü—ñ–∫): {int(bill.consumption_peak)}\n"
                details += f"–°–ø–æ–∂–∏—Ç–æ (–î–µ–Ω—å): {int(bill.consumption_day_3)}\n"
                details += f"–°–ø–æ–∂–∏—Ç–æ (–ù—ñ—á): {int(bill.consumption_night_3)}\n"
                details += f"–¢–∞—Ä–∏—Ñ (–ü—ñ–∫): {bill.tariff_peak}\n"
                details += f"–¢–∞—Ä–∏—Ñ (–î–µ–Ω—å): {bill.tariff_day_3}\n"
                details += f"–¢–∞—Ä–∏—Ñ (–ù—ñ—á): {bill.tariff_night_3}\n"
                details += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {bill.total_cost_3:.2f} –≥—Ä–Ω\n"
            else:
                details += "–î–∞–Ω—ñ –ø–æ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ.\n"
        elif bill.service == "–ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è":
            details += f"–ü–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏: {int(bill.gas_current)}\n"
            details += f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏: {int(bill.gas_previous)}\n"
            details += f"–°–ø–æ–∂–∏—Ç–æ –≥–∞–∑—É: {int(bill.gas_consumption)}\n"
            details += f"–¢–∞—Ä–∏—Ñ –≥–∞–∑: {bill.tariff_gas}\n"
            details += f"–¢–∞—Ä–∏—Ñ –≥–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è: {bill.tariff_gas_supply}\n"
            details += f"–í–∞—Ä—Ç—ñ—Å—Ç—å –≥–∞–∑—É: {bill.cost_gas:.2f} –≥—Ä–Ω\n"
            details += f"–í–∞—Ä—Ç—ñ—Å—Ç—å –≥–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è: {bill.cost_gas_supply:.2f} –≥—Ä–Ω\n"
            details += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {bill.total_cost_gas:.2f} –≥—Ä–Ω\n"
        elif bill.service == "–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è":
            details += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω—å: {int(bill.unloads)}\n"
            details += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–º—ñ—Ç—Ç—î–≤–∏—Ö –±–∞–∫—ñ–≤: {int(bill.bins)}\n"
            details += f"–¢–∞—Ä–∏—Ñ: {bill.trash_tariff}\n"
            details += f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {bill.total_cost_trash:.2f} –≥—Ä–Ω\n"
        else:
            details += "–î–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î.\n"

        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text=f"–í–∞—à –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:\n\n{details}\n–î–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å \"/start\".",
            reply_markup=None
        )

        # await callback.message.answer(
        #     text=f"–í–∞—à –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫:\n\n{details}\n–î–ª—è –≤–∏–±–æ—Ä—É –∞–¥—Ä–µ—Å–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å:",
        #     reply_markup=main_menu_keyboard()
        # )

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_bill_detail: {e}")
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            text="–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É \"/start\" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è",
            reply_markup=None
        )

# -------------------- –†–µ—à—Ç–∞ Message Handlers --------------------

# ----------------- –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è: –û–¥–Ω–æ–∑–æ–Ω–Ω–∏–π -----------------
@dp.message(F.text, StateFilter(Form.elec_one_current))
async def process_elec_one_current(message: types.Message, state: FSMContext):
    try:
        current = float(message.text.strip())
        await state.update_data(elec_one_current=current)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞:")
        await state.set_state(Form.elec_one_previous)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_one_current: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_one_previous))
async def process_elec_one_previous(message: types.Message, state: FSMContext):
    try:
        previous = float(message.text.strip())
        data = await state.get_data()
        current = data.get("elec_one_current")
        consumption = current - previous
        tariff = 4.32
        total_cost = consumption * tariff

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥—Ä–µ—Å–∏ –∑ –ë–î –∑–∞ id
        async with async_session() as session:

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≤ –ë–î
            bill = Bill(
                user_id=data["user_id"],
                address_id=data["address_id"],
                service="–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è",
                created_at=datetime.datetime.now(),
                current=int(current),
                previous=int(previous),
                consumption=int(consumption),
                tariff=tariff,
                total_cost=total_cost
            )
            session.add(bill)
            await session.commit()

            stmt_addr = select(Address).where(Address.id == data["address_id"])
            result_addr = await session.execute(stmt_addr)
            addr_obj = result_addr.scalars().first()

        if addr_obj:
            city = addr_obj.city or ""
            street = addr_obj.street or ""
            house = addr_obj.house or ""
            apartment = addr_obj.apartment or ""
        else:
            city, street, house, apartment = "", "", "", ""

        # –î—ñ—Å—Ç–∞—î–º–æ user_name —ñ–∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —É –∑–º—ñ–Ω–Ω—É user_name
        async with async_session():
            user_name = data["user_name"]

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–æ 2-—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
        bill_text = (
            f"{'-' * 47}\n"
            f"–î–∞—Ç–∞:    {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:    {user_name}\n"
            f"–ê–¥—Ä–µ—Å–∞:    {city}, {street}, {house}, {apartment}\n"
            f"{'-' * 47}\n"
            f"–ü–æ—Å–ª—É–≥–∞:    –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è (–û–¥–Ω–æ–∑–æ–Ω–Ω–∏–π)\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏:    {int(current)} - {int(previous)}\n"
            f"–°–ø–æ–∂–∏—Ç–æ:    {int(consumption)} –∫–í—Ç\n"
            f"–¢–∞—Ä–∏—Ñ:    {tariff:.2f} –≥—Ä–Ω/–∫–í—Ç\n"
            f"{'-' * 47}\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å:    {total_cost:.2f} –≥—Ä–Ω"
        )
        await message.answer(bill_text)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_two_previous_night: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# ----------------- –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è: –î–≤–æ–∑–æ–Ω–Ω–∏–π -----------------
@dp.message(F.text, StateFilter(Form.elec_two_current_day))
async def process_elec_two_current_day(message: types.Message, state: FSMContext):
    try:
        current_day = float(message.text.strip())
        await state.update_data(elec_two_current_day=current_day)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–ù—ñ—á':")
        await state.set_state(Form.elec_two_current_night)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_two_current_day: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_two_current_night))
async def process_elec_two_current_night(message: types.Message, state: FSMContext):
    try:
        current_night = float(message.text.strip())
        await state.update_data(elec_two_current_night=current_night)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–î–µ–Ω—å':")
        await state.set_state(Form.elec_two_previous_day)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_two_current_night: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_two_previous_day))
async def process_elec_two_previous_day(message: types.Message, state: FSMContext):
    try:
        previous_day = float(message.text.strip())
        await state.update_data(elec_two_previous_day=previous_day)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–ù—ñ—á':")
        await state.set_state(Form.elec_two_previous_night)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_two_previous_day: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_two_previous_night))
async def process_elec_two_previous_night(message: types.Message, state: FSMContext):
    try:
        previous_night = float(message.text.strip())
        data = await state.get_data()
        current_day = data.get("elec_two_current_day")
        current_night = data.get("elec_two_current_night")
        previous_day = data.get("elec_two_previous_day")
        consumption_day = current_day - previous_day
        consumption_night = current_night - previous_night
        total_consumption = consumption_day + consumption_night
        tariff_day = 4.32
        tariff_night = 2.16
        cost_day = consumption_day * tariff_day
        cost_night = consumption_night * tariff_night
        total_cost = cost_day + cost_night

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥—Ä–µ—Å–∏ –∑ –ë–î –∑–∞ id
        async with async_session() as session:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≤ –ë–î
            bill = Bill(
                user_id=data["user_id"],
                address_id=data["address_id"],
                service="–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è",
                created_at=datetime.datetime.now(),
                current_day_2=int(current_day),
                current_night_2=int(current_night),
                previous_day_2=int(previous_day),
                previous_night_2=int(previous_night),
                consumption_day_2=int(consumption_day),
                consumption_night_2=int(consumption_night),
                total_consumption_2=int(total_consumption),
                tariff_day_2=tariff_day,
                tariff_night_2=tariff_night,
                cost_day_2=cost_day,
                cost_night_2=cost_night,
                total_cost_2=total_cost
            )
            session.add(bill)
            await session.commit()

            stmt_addr = select(Address).where(Address.id == data["address_id"])
            result_addr = await session.execute(stmt_addr)
            addr_obj = result_addr.scalars().first()

        if addr_obj:
            city = addr_obj.city or ""
            street = addr_obj.street or ""
            house = addr_obj.house or ""
            apartment = addr_obj.apartment or ""
        else:
            city, street, house, apartment = "", "", "", ""

        async with async_session():
            user_name = data["user_name"]

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–æ 2-—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
        bill_text = (
            f"{'-' * 47}\n"
            f"–î–∞—Ç–∞:    {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:    {user_name}\n"
            f"–ê–¥—Ä–µ—Å–∞:    {city}, {street}, {house}, {apartment}\n"
            f"{'-' * 47}\n"
            f"–ü–æ—Å–ª—É–≥–∞:    –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è (–î–≤–æ–∑–æ–Ω–Ω–∏–π)\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –î–µ–Ω—å:    {int(current_day)} - {int(previous_day)}\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ù—ñ—á:    {int(current_night)} - {int(previous_night)}\n"
            f"–°–ø–æ–∂–∏—Ç–æ –î–µ–Ω—å:    {int(consumption_day)} –∫–í—Ç\n"
            f"–°–ø–æ–∂–∏—Ç–æ –ù—ñ—á:    {int(consumption_night)} –∫–í—Ç\n"
            f"–¢–∞—Ä–∏—Ñ –î–µ–Ω—å:    {tariff_day:.2f} –≥—Ä–Ω/–∫–í—Ç\n"
            f"–¢–∞—Ä–∏—Ñ –ù—ñ—á:    {tariff_night:.2f} –≥—Ä–Ω/–∫–í—Ç\n"
            f"{'-' * 47}\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:    {total_cost:.2f} –≥—Ä–Ω"
        )
        await message.answer(bill_text)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_two_previous_night: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# ----------------- –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è: –¢—Ä—å–æ—Ö–∑–æ–Ω–Ω–∏–π -----------------
@dp.message(F.text, StateFilter(Form.elec_three_current_peak))
async def process_elec_three_current_peak(message: types.Message, state: FSMContext):
    try:
        current_peak = float(message.text.strip())
        await state.update_data(elec_three_current_peak=current_peak)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–î–µ–Ω—å':")
        await state.set_state(Form.elec_three_current_day)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_three_current_peak: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_three_current_day))
async def process_elec_three_current_day(message: types.Message, state: FSMContext):
    try:
        current_day = float(message.text.strip())
        await state.update_data(elec_three_current_day=current_day)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ—Ç–æ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–ù—ñ—á':")
        await state.set_state(Form.elec_three_current_night)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_three_current_day: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_three_current_night))
async def process_elec_three_current_night(message: types.Message, state: FSMContext):
    try:
        current_night = float(message.text.strip())
        await state.update_data(elec_three_current_night=current_night)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–ü—ñ–∫':")
        await state.set_state(Form.elec_three_previous_peak)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_three_current_night: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_three_previous_peak))
async def process_elec_three_previous_peak(message: types.Message, state: FSMContext):
    try:
        previous_peak = float(message.text.strip())
        await state.update_data(elec_three_previous_peak=previous_peak)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–î–µ–Ω—å':")
        await state.set_state(Form.elec_three_previous_day)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_three_previous_peak: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_three_previous_day))
async def process_elec_three_previous_day(message: types.Message, state: FSMContext):
    try:
        previous_day = float(message.text.strip())
        await state.update_data(elec_three_previous_day=previous_day)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≤ –∑–æ–Ω—ñ '–ù—ñ—á':")
        await state.set_state(Form.elec_three_previous_night)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_three_previous_day: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.elec_three_previous_night))
async def process_elec_three_previous_night(message: types.Message, state: FSMContext):
    try:
        previous_night = float(message.text.strip())
        data = await state.get_data()
        current_peak = data.get("elec_three_current_peak")
        current_day = data.get("elec_three_current_day")
        current_night = data.get("elec_three_current_night")
        previous_peak = data.get("elec_three_previous_peak")
        previous_day = data.get("elec_three_previous_day")
        consumption_peak = current_peak - previous_peak
        consumption_day = current_day - previous_day
        consumption_night = current_night - previous_night
        total_consumption = consumption_peak + consumption_day + consumption_night
        tariff_peak = 6.48
        tariff_day = 4.32
        tariff_night = 1.728
        cost_peak = consumption_peak * tariff_peak
        cost_day = consumption_day * tariff_day
        cost_night = consumption_night * tariff_night
        total_cost = cost_peak + cost_day + cost_night

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥—Ä–µ—Å–∏ –∑ –ë–î –∑–∞ id
        async with async_session() as session:
            # –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –≤ –ë–î
            bill = Bill(
                user_id=data["user_id"],
                address_id=data["address_id"],
                service="–ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è",
                created_at=datetime.datetime.now(),
                current_peak=int(current_peak),
                current_day_3=int(current_day),
                current_night_3=int(current_night),
                previous_peak=int(previous_peak),
                previous_day_3=int(previous_day),
                previous_night_3=int(previous_night),
                consumption_peak=int(consumption_peak),
                consumption_day_3=int(consumption_day),
                consumption_night_3=int(consumption_night),
                total_consumption_3=int(total_consumption),
                tariff_peak=tariff_peak,
                tariff_day_3=tariff_day,
                tariff_night_3=tariff_night,
                cost_peak=cost_peak,
                cost_day_3=cost_day,
                cost_night_3=cost_night,
                total_cost_3=total_cost
            )
            session.add(bill)
            await session.commit()

            stmt_addr = select(Address).where(Address.id == data["address_id"])
            result_addr = await session.execute(stmt_addr)
            addr_obj = result_addr.scalars().first()

        if addr_obj:
            city = addr_obj.city or ""
            street = addr_obj.street or ""
            house = addr_obj.house or ""
            apartment = addr_obj.apartment or ""
        else:
            city, street, house, apartment = "", "", "", ""

        async with async_session():
            user_name = data["user_name"]

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–æ 2-—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
        bill_text = (
            f"{'-' * 47}\n"
            f"–î–∞—Ç–∞:    {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:    {user_name}\n"
            f"–ê–¥—Ä–µ—Å–∞:    {city}, {street}, {house}, {apartment}\n"
            f"{'-' * 47}\n"
            f"–ü–æ—Å–ª—É–≥–∞:    –ï–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥—ñ—è (–¢—Ä—å–æ—Ö–∑–æ–Ω–Ω–∏–π)\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ü—ñ–∫:    {int(current_peak)} - {int(previous_peak)}\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –î–µ–Ω—å:    {int(current_day)} - {int(previous_day)}\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –ù—ñ—á:    {int(current_night)} - {int(previous_night)}\n"
            f"–°–ø–æ–∂–∏—Ç–æ –ü—ñ–∫:    {int(consumption_peak)} –∫–í—Ç\n"
            f"–°–ø–æ–∂–∏—Ç–æ –î–µ–Ω—å:    {int(consumption_day)} –∫–í—Ç\n"
            f"–°–ø–æ–∂–∏—Ç–æ –ù—ñ—á:    {int(consumption_night)} –∫–í—Ç\n"
            f"–¢–∞—Ä–∏—Ñ –ü—ñ–∫:    {tariff_peak:.2f} –≥—Ä–Ω/–∫–í—Ç\n"
            f"–¢–∞—Ä–∏—Ñ –î–µ–Ω—å:    {tariff_day:.2f} –≥—Ä–Ω/–∫–í—Ç\n"
            f"–¢–∞—Ä–∏—Ñ –ù—ñ—á:    {tariff_night:.2f} –≥—Ä–Ω/–∫–í—Ç\n"
            f"{'-' * 47}\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:    {total_cost:.2f} –≥—Ä–Ω"
        )
        await message.answer(bill_text)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_elec_three_previous_night: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# ----------------- –ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è -----------------
@dp.message(F.text, StateFilter(Form.gas_current))
async def process_gas_current(message: types.Message, state: FSMContext):
    try:
        current = float(message.text.strip())
        await state.update_data(gas_current=current)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ –≥–∞–∑—É:")
        await state.set_state(Form.gas_previous)
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_gas_current: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.gas_previous))
async def process_gas_previous(message: types.Message, state: FSMContext):
    try:
        previous = float(message.text.strip())
        data = await state.get_data()
        current = data.get("gas_current")
        gas_consumption = current - previous
        tariff_gas = 7.96
        tariff_supply = 1.308
        cost_gas = gas_consumption * tariff_gas
        cost_supply = gas_consumption * tariff_supply
        total_cost = cost_gas + cost_supply

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥—Ä–µ—Å–∏ –∑ –ë–î –∑–∞ id
        async with async_session() as session:

            # –ó–∞–ø–∏—Å —Ä–∞—Ö—É–Ω–∫—É –≤ –ë–î
            bill = Bill(
                user_id=data["user_id"],
                address_id=data["address_id"],
                service="–ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è",
                created_at=datetime.datetime.now(),
                gas_current=int(current),
                gas_previous=int(previous),
                gas_consumption=int(gas_consumption),
                tariff_gas=tariff_gas,
                tariff_gas_supply=tariff_supply,
                cost_gas=cost_gas,
                cost_gas_supply=cost_supply,
                total_cost_gas=total_cost
            )
            session.add(bill)
            await session.commit()

            stmt_addr = select(Address).where(Address.id == data["address_id"])
            result_addr = await session.execute(stmt_addr)
            addr_obj = result_addr.scalars().first()

        if addr_obj:
            city = addr_obj.city
            street = addr_obj.street or ""
            house = addr_obj.house or ""
            apartment = addr_obj.apartment or ""
        else:
            city, street, house, apartment = "", "", "", ""

        async with async_session():
            user_name = data["user_name"]

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–æ 2-—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
        bill_text = (
            f"{'-' * 47}\n"
            f"–î–∞—Ç–∞:    {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:    {user_name}\n"
            f"–ê–¥—Ä–µ—Å–∞:    {city}, {street}, {house}, {apartment}\n"
            f"{'-' * 47}\n"
            f"–ü–æ—Å–ª—É–≥–∞:    –ì–∞–∑ —Ç–∞ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è\n"
            f"–ü–æ–∫–∞–∑–Ω–∏–∫–∏:    {int(current)} - {int(previous)}\n"
            f"–°–ø–æ–∂–∏—Ç–æ:    {int(gas_consumption)} –º¬≥\n"
            f"–¢–∞—Ä–∏—Ñ –ì–∞–∑:    {tariff_gas:.2f} –≥—Ä–Ω/–º¬≥\n"
            f"–¢–∞—Ä–∏—Ñ –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è:    {tariff_supply:.3f} –≥—Ä–Ω/–º¬≥\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å –ì–∞–∑:    {cost_gas:.2f} –≥—Ä–Ω\n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å –ì–∞–∑–æ–ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è:    {cost_supply:.2f} –≥—Ä–Ω\n"
            f"{'-' * 47}\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:    {total_cost:.2f} –≥—Ä–Ω"
        )
        await message.answer(bill_text)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_gas_previous: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")

# ----------------- –í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è -----------------
@dp.message(F.text, StateFilter(Form.trash_unloads))
async def process_trash_unloads(message: types.Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
            return
        await state.update_data(trash_unloads=int(message.text.strip()))
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–º—ñ—Ç—Ç—î–≤–∏—Ö –±–∞–∫—ñ–≤:")
        await state.set_state(Form.trash_bins)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_trash_unloads: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@dp.message(F.text, StateFilter(Form.trash_bins))
async def process_trash_bins(message: types.Message, state: FSMContext):
    try:
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
            return
        bins = int(message.text.strip())
        data = await state.get_data()
        unloads = data.get("trash_unloads")
        tariff = 165
        total_cost = unloads * bins * tariff

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∞–¥—Ä–µ—Å–∏ –∑ –ë–î –∑–∞ id
        async with async_session() as session:

            # –ó–∞–ø–∏—Å —Ä–∞—Ö—É–Ω–∫—É –≤ –ë–î
            bill = Bill(
                user_id=data["user_id"],
                address_id=data["address_id"],
                service="–í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è",
                created_at=datetime.datetime.now(),
                unloads=unloads,
                bins=bins,
                trash_tariff=tariff,
                total_cost_trash=total_cost
            )
            session.add(bill)
            await session.commit()

            stmt_addr = select(Address).where(Address.id == data["address_id"])
            result_addr = await session.execute(stmt_addr)
            addr_obj = result_addr.scalars().first()

        if addr_obj:
            city = addr_obj.city or ""
            street = addr_obj.street or ""
            house = addr_obj.house or ""
            apartment = addr_obj.apartment or ""
        else:
            city, street, house, apartment = "", "", "", ""

        async with async_session():
            user_name = data["user_name"]

        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–∞—Ö—É–Ω–∫—É –∑ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è–º —á–∏—Å–ª–æ–≤–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–æ 2-—Ö –¥–µ—Å—è—Ç–∫–æ–≤–∏—Ö
        bill_text = (
            f"{'-' * 47}\n"
            f"–î–∞—Ç–∞:    {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:    {user_name}\n"
            f"–ê–¥—Ä–µ—Å–∞: {city}, {street}, {house}, {apartment}\n"
            f"{'-' * 47}\n"
            f"–ü–æ—Å–ª—É–≥–∞:    –í–∏–≤—ñ–∑ —Å–º—ñ—Ç—Ç—è\n"
            f"–í—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:    {int(unloads)}\n"
            f"–°–º—ñ—Ç—Ç—î–≤—ñ –±–∞–∫–∏:    {int(bins)}\n"
            f"–¢–∞—Ä–∏—Ñ: {tariff:.2f} –≥—Ä–Ω\n"
            f"{'-' * 47}\n"
            f"–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å:    {total_cost:.2f} –≥—Ä–Ω"
        )
        await message.answer(bill_text)
        await state.clear()
    except ValueError:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ —É process_trash_bins: {e}")
        await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


# –§—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
async def on_startup():
    await init_db()
    await async_clear_old_bills()
    logging.info("Bot started.")

async def main():
    await on_startup()
    await dp.start_polling(bot)
    main_reply_keyboard()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(main())
    finally:
        # –î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∏
        loop.run_until_complete(loop.shutdown_asyncgens())
        loop.close()

